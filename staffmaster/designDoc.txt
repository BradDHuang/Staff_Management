
// This is the design doc. for this personnel-management project.

1. Database design & reasons:
   Use mongoDB and then make use of mLab to have access & control of the personnel DB.
   use Schema for properties like name / title etc.
   // for pic. try to use a link for all the profile pics, try upload-pic feature later.

2. REST API specification:
   For the list of all staff,
   -- GET /api/personnel
   
   For a specific person,
   -- GET /api/personnel/:staffId
   
   For add/create a new staff,
   -- GET /api/personnel/new
   // show the form for adding new staff
   -- POST /api/personnel
   // create
   
   For editing an existing person,
   -- GET /api/personnel/:staffId/edit
   // show the form for editing a person
   -- PUT /api/personnel/:staffId
   // update
   
   For deleting an existing person (and his/her relationships),
   -- DELETE /api/personnel/:staffId

3. API functions at NodeJS/ExpressJS:
   Staff.find()
   find all staff members.
   
   Staff.findById()
   find one staff with the id; 
   and use find() & filter() to find & get his/her manager & direct-reports.
   
   Staff.create()
   create/add a new staff.
   if he/she has a manager, use findById() to get the manager by retrieving the manager's id.
   also, use findByIdAndUpdate() to update the manager's direct reports.
   
   Staff.findByIdAndUpdate()
   edit an existing staff.
   manager changed ? findByIdAndUpdate() the manager : do nothing for the manager;
   if manager changed, both prev/new manager's direct-reports should be updated as well.
   
   Staff.findByIdAndRemove()
   delete a staff.
   his/her manager & report_to relationships should be updated.

4. UI:
   (1) a main page with infinite scrolling.
   (2) a list to show a specific person's details info.
   (2) a form for adding new person.
   (3) a form for editing staff, with remove btn to delete the person.
   (4) a list to show a specific person's report_to list.

5. React components hierarchy/states/props & Redux store specification:
   Reducers/
       App
   Components/
       Main_List
       Create
       Edit
       Staff_Details
       Report_to_List
       
   // mapStateToProps()
    const mapStateToProps = (state) => {
      return {
        staff: state.staff,
      };
    };

   // store
    const store = createStore(
        reducers,
        composeEnhancers(applyMiddleware(thunk))
    );
    
   // reducers
    staff.js

6. Features/pages to have:
    
    (1) Home page, list/dir. of all people.
        with name / pic. / title / # of direct reports / other...
        sub-features: 
            sorting / search / infinite scrolling
            onClick of a person - go to his/her page
            Add btn. for adding new people
            
    (2) Staff details page.
        details info
            View manager (only one / none)
            View direct reports (list/array)
            Call office/cell, invoke phone app
            Send email, invoke email app
            Edit btn, which can change / remove info & relationships
            Back btn, to Home page.
            
    (3) Direct reports list page.
        with name / pic. / direct reports
        onClick of a person - go to his/her page   
        Back btn, go back to the original person's details page.    
    
    Notes: 
        pic. file upload (into a static folder) in Add new.
        the relationships (manager & report_to) can't form a 'circle' among staff.
        display full-image in Edit and thumbnail in lists.
        













